// Custom mixins.
// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: '?',
    svg: '#' + str-replace($name, ' ', '_')
  );

  $formats: (
    otf: 'opentype',
    ttf: 'truetype'
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url('../' + quote($path + '.' + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

@mixin roboto {
  font-family: "Roboto", Helvetica, Arial, sans-serif;
}

@mixin muli {
  font-family: "Muli", Helvetica, Arial, sans-serif;
}

@mixin miller-display {
  font-family: "miller-display", Helvetica, Arial, sans-serif;
}

@mixin georgia {
  font-family: "Georgia", Helvetica, Arial, sans-serif;
}

@mixin container-header {
  @media only screen and (min-width: $desktop) and (max-width: $desktopOnly) {
    max-width: 100%;
    margin-left: $containerMarginDesktop2;
    margin-right: $containerMarginDesktop2;
  }

  @media only screen and (min-width: $desktopWideLarge) {
    max-width: $containerdesktopWideLarge2;
    margin: auto;
  }

  @media only screen and (min-width: $desktopSupperLarge) and (max-width: $desktopSupperWideLargeOnly) {
    max-width: 100%;
    margin-left: $containerMarginDesktopSupperLarge2;
    margin-right: $containerMarginDesktopSupperLarge2;        
  }

  @media only screen and (min-width: $desktopSupperWideLarge) {
    max-width: $containerdesktopSupperWideLarge2;
  }
}

//Single image background with retina support
//USAGE:  @include background-image-retina('preloader', 'GIF', rem(20px), rem(20px));
@mixin background-image-retina($image-1x, $image-2x, $width, $height) {
  background-image: url($image-path + $image-1x);

  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url($image-path + $image-2x);
    background-size: $width $height;
  }
}

// Add demo label for responsive info.
@mixin show-breakpoints {
  &:after {
    background-color: $pigeon-post-light;
    border-radius: 20px;
    bottom: rem(20px);
    box-shadow: 0 1px 10px $gray;
    color: $black;
    content: 'Mobile';
    display: block;
    font-size: rem(16px);
    padding: rem(5px 10px);
    position: fixed;
    right: rem(20px);
    z-index: 1000;

    @media (min-width: $tablet) {
      content: 'Tablet' !important;
    }

    @media (min-width: $desktop) {
      content: 'Small desktop' !important;
    }
  }
}

// Clearfix as mixin.
@mixin clearfix {
  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Mixin focus
@mixin focus ($color: $black) {
  box-shadow: 0 0 rem(5px) rgba($color, 1);
  outline: 0 none;
}

// grid
@mixin grid($cols: 2, $margin-right: 10px, $margin-bottom: $margin-right, $margin-right-tablet: $margin-right, $margin-bottom-tablet: $margin-bottom,$margin-right-desktop: $margin-right, $margin-bottom-desktop: $margin-bottom,$margin-right-desktopSupperLarge: $margin-right, $margin-bottom-desktopSupperLarge: $margin-bottom, $align: center) {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  justify-content: $align;

  > div,
  > li {
    margin-bottom: $margin-bottom;
    width: 100%;

    &:last-of-type {
      margin-bottom: 0;
    }

    @media only screen and (min-width: 768px) {
      width: calc((100% - (#{$margin-right-tablet} + 1px)) / 2);
      margin: 0 $margin-right-tablet $margin-bottom-tablet 0;

      &:nth-of-type(2n) {
        margin-right: 0;
      }

      &:nth-last-of-type(1),
      &:nth-last-of-type(2) {
        margin-bottom: 0;
      }
    }

    @media only screen and (min-width: 1024px) {
      width: calc((100% - (#{$margin-right-desktop} * (#{$cols} - 1) + 1px)) / #{$cols});
      margin: 0 $margin-right-desktop $margin-bottom-desktop 0;

      &:nth-of-type(2n) {
        margin-right: $margin-right-desktop;
      }

      &:nth-of-type(#{$cols}n) {
        margin-right: 0;
      }

      &:nth-last-of-type(3) {
        margin-bottom: 0;
      }
    }

    @media only screen and (min-width: $desktopSupperLarge) {
      width: calc((100% - (#{$margin-right-desktopSupperLarge} * (#{$cols} - 1) + 1px)) / #{$cols});
      margin: 0 $margin-right-desktopSupperLarge $margin-bottom-desktopSupperLarge 0;

      &:nth-of-type(2n) {
        margin-right: $margin-right-desktopSupperLarge;
      }

      &:nth-of-type(#{$cols}n) {
        margin-right: 0;
      }
    }
  }
}

@mixin grid-padding($cols: 2, $padding-mobile : 20px, $padding-desktop: $padding-mobile, $align: center) {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  justify-content: $align;
  margin: 0 -#{$padding-mobile};

  @media only screen and (min-width: $tablet) {
    margin: 0 -#{$padding-desktop};
  }

  > div,
  > li {
    width: 100%;
    padding: $padding-mobile;

    @media only screen and (min-width: $mobileLandScape) {
      width: calc(100% / 2);
    }

    @media only screen and (min-width: $tablet) {
      width: calc(100% / #{$cols});
      padding: $padding-desktop;
    }
  }
}

// animation slide
$j : 1;
@mixin animation_slide($items ,$duration, $fade: .5s, $delay: 0s, $total: $items * $duration + $items * $fade) {
  > div {
    position: absolute;

    &:first-child {
      animation-name: animation_slide#{$j};
      animation-duration: $total;
      animation-timing-function: linear;
      animation-iteration-count: infinite;
      animation-delay: $delay;
      opacity: 1;
    }

    &:not(:first-child) {
      animation-name: animation_slide#{$j + 1};
      animation-duration: $total;
      animation-timing-function: linear;
      animation-iteration-count: infinite;
      opacity: 0;
    }

    @for $i from 2 through $items {
      &:nth-child(#{$i}) {
        animation-delay: (($duration * ($i - 1)) + $fade * ($i - 2)) + $delay;
      }
    }

    $duration_percel : ($duration * 100) / $total;
    $fade_percel : ($fade * 100) / $total;

    @keyframes animation_slide#{$j} {
      0% {
        opacity: 1;
      }
      #{$duration_percel}% {
        opacity: 1;
      }
      #{$duration_percel + $fade_percel}% {
        opacity: 0;
      }
      #{100 - $fade_percel}% {
        opacity: 0;
      }
      100% {
        opacity: 1;
      }
    }

    @keyframes animation_slide#{$j + 1} {
      2% {
        opacity: 0;
      }
      #{$fade_percel}% {
        opacity: 1;
      }
      #{$duration_percel + $fade_percel}% {
        opacity: 1;
      }
      #{$duration_percel + ($fade_percel * 2)}% {
        opacity: 0;
      }
      100% {
        opacity: 0;
      }
    }

    $j: ($j + 2) !global;
  }
}
